// Code generated for package driver by go-bindata DO NOT EDIT. (@generated)
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/sqlite_upsert.go.tpl
// override/templates_test/singleton/sqlite3_main_test.go.tpl
// override/templates_test/singleton/sqlite3_suites_test.go.tpl
// override/templates_test/upsert.go.tpl
package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x73\xe3\xc6\x0d\x7f\x26\x3f\x05\xe2\xe9\xc4\x64\x47\xa6\xfb\xec\x8e\x1e\xfc\xe7\x72\xf5\x24\xe7\x28\xe7\xb8\x37\xd3\x4c\xc6\x43\x91\xa0\xb4\xe3\xd5\x2e\x6f\xb9\xb4\xac\xb2\xfc\xee\x1d\x80\x4b\x91\x94\x28\x5b\x77\x4d\xda\xf4\xc9\xe2\x2e\x16\xf8\x2d\xf0\xc3\x02\x70\x55\x9d\xc1\x9f\x62\x29\xe2\x02\x2e\xa6\x10\x5d\xd2\x2f\x2c\xa2\x9f\xe3\xb9\x44\x68\xfe\x44\x77\xf1\x0a\xeb\xda\x67\xd1\x22\x59\xe2\x2a\x6e\xb6\xe9\x40\x27\x01\xff\x82\xe8\xbe\xdb\xe5\x03\x22\x83\xe8\x32\x4d\xdf\x4b\x3d\x8f\x25\x9c\xd5\xb5\x7f\x7e\x0e\x0f\x79\x81\xc6\xbe\x87\xd8\x5a\x5c\xe5\xb6\x80\x58\x81\x50\xb4\x36\x81\x58\xa5\x90\x6a\xe4\xb5\x32\x4f\x63\x8b\xa0\x0d\x88\x85\xd2\x06\x41\x2b\x48\xb4\xca\xa4\x48\x6c\xe4\x67\xa5\x4a\x20\xd0\xf0\xe7\xaa\x6a\xf0\x47\x0f\xf9\xbd\x50\x8b\x52\xc6\xa6\xae\xc3\xd6\x4a\xc0\x20\x94\xb6\x10\xdd\xe9\x6b\xad\x2c\xbe\xd8\xba\x4e\xec\x0b\xa9\xa2\x8f\xc8\x2d\x4e\xa0\xaa\x50\xa5\x04\xd2\x59\xfe\x51\x5d\x3b\x6b\x30\xd7\x5a\x4e\xb6\xc6\xaf\xb5\x2c\x57\xaa\x80\x5f\x7e\x2d\xac\x11\x6a\x31\x71\x07\xdc\xfa\xc4\xdd\xa6\x15\x9b\x6b\x21\x23\xf7\x11\x02\x1a\xa3\x0d\x54\xbe\x67\xd0\x96\x46\x81\x8e\x1a\xa4\x0d\xd0\x3e\x48\x3e\xf7\x1e\xed\xcd\x55\x10\x56\x15\xca\x02\x19\xf8\x04\xda\x0d\x27\xe9\xf6\x55\x5a\xd7\x93\x3d\xe8\x7b\xa8\x5f\x07\x1b\xfa\xb5\xef\x6f\x1d\xe1\x37\x21\xa4\xa0\xf4\xc2\x48\x3f\x67\xb1\x12\xc9\x4e\x40\x67\xff\x59\x44\x81\x75\x16\xb4\xc6\x3e\x3a\x3a\xc4\xb3\x3f\x5c\x8c\x2b\xdf\x13\x19\xdd\x82\x52\xe4\x0f\x16\xe0\xbf\x32\xae\x6f\xa6\xa0\x84\x24\xa0\x5e\x4e\x6e\x0f\xd8\xe4\x27\x13\xe7\xef\x8c\x09\xd0\x98\x30\xf4\xbd\x7a\x8c\x0c\x07\xa2\x3f\x16\x7c\x28\x0b\xa1\x16\xf4\x8d\x2f\x98\x94\x56\x9b\x2f\x49\xf0\x9e\xea\xfc\xeb\x98\x31\xdb\x77\x39\x01\x69\xdc\xfb\xce\x41\xea\x39\x7e\x9f\x2e\x9d\xb8\x5b\xea\x9d\x1a\x0f\xc7\x7f\x89\x46\x23\x64\xef\x93\x9b\x70\xff\x4f\xa9\xb2\x0d\xde\xef\x41\x8b\x7b\xc4\x81\xa7\x20\xd5\x49\xb9\x42\x65\x63\x2b\xb4\x82\x4c\x1b\x58\xea\x35\x58\x0d\xb9\xd1\x39\x1a\xb9\x81\xb2\xc0\xe1\x5d\xd9\xe2\xe0\xba\xc7\xb2\xea\xff\x9c\x54\xdb\xfa\x23\x32\xd0\x30\xed\x82\xeb\xea\x11\xef\x17\xd1\x1d\xae\x83\x93\xaa\x8a\x66\x4f\x8b\xa6\xfc\x5f\x80\xd2\x50\x55\x83\x96\x80\xfc\xfb\x2c\x52\x4c\xd9\xe7\x25\xbb\xe7\x84\xd9\xe0\x7b\xd4\x2d\x50\xe4\x25\xc5\xf2\xc4\x8a\x15\x16\x36\x5e\xe5\x8f\x8d\xd4\xe3\x12\x65\x8e\xe6\x04\x22\xa8\x1b\xe9\x8e\xd4\x7f\xd3\xfa\xa9\x60\x1a\x0d\xe8\x9f\xea\x2b\xcc\xb4\xc1\x26\x0a\x2c\x74\x74\x2e\xec\x53\xb9\xbb\x2d\xc1\x65\xb4\xec\x7c\xdf\xf7\xd4\x3f\x6f\x30\x8b\x4b\x69\xb9\x25\xfa\x5c\xa2\x11\x58\x44\x77\x5a\xfd\x03\x8d\x76\x5b\xf7\x48\x3c\x70\x2c\xb9\xd1\x6b\xd5\xf1\xc4\x79\xfa\x93\xb0\x4b\x27\x3c\x01\x1d\xfa\xbe\x77\x7e\x0e\x57\xa5\x90\x29\x24\x71\xb2\x44\x78\xc2\x0d\x08\x75\x26\x85\x42\x28\x17\x52\xc8\x0d\x9c\xc1\x6a\x53\x7c\x96\xf0\x5c\x40\x4e\x7f\x73\xa3\xe7\x12\x57\x85\xef\xcd\xcb\x8c\xc0\x14\xd6\xac\x62\xb5\x90\x48\xd5\xe1\xaa\xcc\x32\x34\x41\xc8\x6e\xda\xa3\x0c\x5d\x72\x5e\x66\xd1\x27\x23\x2c\x5e\x6d\x2c\x06\xa7\xf6\x94\x62\x03\x44\xcd\xb1\xed\x8c\xb7\xfd\xdd\xe5\x88\x96\x29\xbe\x8f\x13\x48\x08\x84\x89\xd5\x02\xf7\xc8\x38\x50\x78\xcf\xbc\x0c\x92\xc3\x0a\x77\x45\x0b\x6b\x12\xad\x9e\xa3\x5b\xab\xe3\x60\x40\xe7\xe8\x7b\xa1\xd2\x70\x14\xc3\x50\xee\x5a\xcb\xdf\x16\xc6\xf0\x79\x38\x0c\x63\x28\xf7\x35\x30\xf6\x75\xf6\x48\xf8\x8a\x2e\xe2\xd0\xc5\x14\x68\xd7\x6d\x84\xbe\xd7\x91\x64\x56\xb6\x24\x99\x97\x59\xc8\x69\x36\x4a\xd9\x26\xa5\xae\x89\x96\x1f\x4a\x1b\x7d\xfc\x41\x27\x4f\xa4\x89\x89\x3a\x69\xf8\x9a\x92\xa1\xb7\xcf\xff\xf2\x84\x9b\x5f\x8f\x36\xf4\xa0\x64\x63\xca\xf7\x9e\x63\xc3\x39\xca\xef\x8f\xcf\x9c\xfe\xc6\x19\x26\x07\xb4\xed\xa4\x41\x4b\x40\x86\x2e\xbf\xed\x7d\x51\x66\xfa\x9e\x77\x08\xc1\xa5\x94\xed\x33\xf9\x8a\xd4\x48\x0e\x1f\x27\xad\x4b\xdb\x3f\xd0\x45\x91\x3e\x43\xdf\xf3\x5c\x71\xbb\x98\xee\x90\xf7\xa1\xf7\xf5\x9b\x5c\x61\x66\xc4\x2a\x36\x9b\xef\x71\xd3\x13\x26\x47\x8f\xbe\x16\xdf\x7e\x0b\x12\x95\x4b\xbc\x90\xca\xc2\x5f\xd8\xed\x6f\x57\x85\x52\xf1\x2c\x68\xb5\x7b\xff\x77\x6b\x04\x95\xad\x52\xa6\xfc\x4a\xcf\xf9\xf9\x73\x2e\x48\x18\x16\x48\x51\x70\xcd\xe0\xa2\xe1\xb5\xaf\x0a\x39\x68\xe7\x85\x69\x90\x13\xca\x76\xa3\x8f\x73\x7b\x70\x0a\xab\xf8\x09\x83\xae\x36\xd2\x89\x63\x7d\x44\xf9\x4d\xba\xf2\xcd\xd6\xc8\xe4\x10\xe9\xf7\x0f\xf3\x25\xbc\x26\x6b\x22\xaa\x1b\x1b\x98\x36\x77\x6e\x78\xff\x13\x2d\xdd\xff\xf4\x83\xb0\x18\xa4\x22\x96\x48\xda\x4f\xaa\xaa\x3f\x54\xd7\xf5\xc9\x58\xe3\x66\xd0\xb6\xcb\x5d\x1f\xd0\x16\x7a\x8e\x6a\x63\xf5\x39\x96\x25\x7e\x88\xf3\x9c\xaf\x4e\xf9\xd4\x55\xb0\x2b\xa1\x52\xb7\x75\xc8\x21\x3f\x6f\x72\x3c\x78\xe1\xad\xda\xd6\xaa\xd7\xd6\xe7\x5e\x5d\x1d\x14\x56\x76\x87\x0b\x9a\x41\x1b\x92\x60\x1b\x2f\x86\x6b\xd0\xfe\xde\x60\xc9\x2e\x19\x1c\x81\x3a\xc4\xca\x60\xeb\xa6\x79\x61\x37\xf2\x63\x8c\x19\x85\x29\xba\x55\xa9\x30\x98\xd8\xa0\x5d\xf8\x3b\x49\xfc\x98\x05\x9a\x28\xf3\x1c\xcb\x41\xaf\xc0\x9b\xc5\x77\x46\xaf\xda\x2b\xb0\x42\xf7\x92\x0e\x82\x14\x36\x2f\x5f\x83\x84\x5a\x3a\xa1\x2c\x9a\x2c\x4e\xb0\x6a\xfa\x1f\x26\xfc\x8e\xb3\x7a\x8e\x6c\x0f\x76\xc6\x67\xd6\x1c\x36\xdd\xd3\xd1\xb6\x69\x83\x66\x76\xdb\x76\x71\xd3\x78\x83\xf3\x72\xf1\x41\xa7\x4d\xbb\x90\xad\x6c\xf4\x5d\x6e\x84\xb2\x52\x05\xdd\x3e\x97\x25\xd3\x1a\x60\xda\x87\x6f\x4b\x93\xcb\x42\xd7\x7a\x71\x43\x32\x30\x7c\x5b\xb0\x70\x90\xd8\x17\x1e\x83\xbc\x35\x1f\xe3\x5a\xb7\xa3\x8a\xae\xca\x72\xbb\x36\xd7\x47\xe0\x5a\x8f\xa1\x69\x67\x98\x23\xbc\x3f\xea\x3d\xaf\x61\x32\xf5\x9d\x11\xa7\xfc\x47\xbd\x0e\x7a\x28\x1a\x73\x51\x14\x85\xd1\x7d\x12\x73\x66\x50\x08\x69\x81\x55\x76\xee\x18\xd3\xe4\x4c\x05\xdc\xe5\x7e\x89\x56\x77\xad\x6d\x26\x4c\xa7\x50\x7c\x96\xd1\x3b\x63\xee\xf4\x47\xbd\x6e\xfa\x0c\x67\x91\x52\xe4\xfc\x1c\x66\xba\xb0\x0b\x83\x05\x8f\x66\xea\xd4\x3a\x9a\x42\xac\x36\x76\x49\x33\xdc\x7a\x89\x0a\xec\x12\x0d\x9e\x16\x34\x1f\x34\x2f\x94\xcb\xa3\xae\xd1\x1c\x77\xd3\x63\x9b\xf3\x7c\x3f\x1a\x82\xc6\xbd\xb4\xeb\x94\xfd\x73\x6f\xfb\x64\xe8\x82\x6e\xb2\x18\x9d\x08\xa8\xd2\xd1\x7c\x4b\xc3\x2d\x3f\xd0\x5f\x52\xef\xda\xf9\x67\xa7\x7f\x39\xae\x21\x6a\x1b\xaf\x23\xc4\xb9\xd1\x82\x69\x73\xdd\xa3\x0d\x6c\x1b\x2e\xef\x95\xa9\x6b\xfb\x9f\xc9\x54\x5f\x66\x16\xcd\x57\x4d\x5c\x6e\xa6\xda\x86\xcd\x29\x55\x42\xf6\xa7\xad\xfa\xdf\x01\x00\x00\xff\xff\x95\xef\x84\x9e\x80\x16\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonSqlite_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xa3\x38\x14\x7d\xb6\x7f\xc5\xad\xa5\xaa\x58\xb2\xe8\xf6\x75\xa5\x3c\xb4\x81\x76\xb3\x42\xd0\x04\xd8\x1d\x69\x34\x0f\x04\x2e\xad\x25\x02\x19\x7f\x64\xa6\x9a\xe6\xbf\x8f\x4c\xa0\xa4\x4d\x47\x55\xa3\x88\x44\xbe\xf7\x1c\x9f\x7b\x7c\xcc\xe5\x25\xac\xad\x6c\xaa\x7c\xab\x51\x99\xa5\x45\xf5\x94\x2e\x23\x69\xf0\xb0\xac\xa1\x80\x74\x19\x81\x36\x85\xc1\x0d\xb6\x06\xb4\x51\xb2\x7d\x00\xab\xdd\xd3\x3c\x22\xd8\x1e\x19\x14\xa6\x80\xad\xea\x76\xb2\xc2\xca\xa7\xb5\x6d\xcb\x3f\x10\x7b\x95\x2c\xa0\x52\x72\x87\x4a\xfb\x81\x2c\x1a\x2c\x8d\x00\x53\xac\x1b\x8c\x8b\x0d\x0e\x1b\x08\xb0\xdb\xaa\x30\x98\xb4\xf3\xae\xad\x1b\x59\x1a\x58\x77\x5d\x23\x40\xa1\x19\x6b\x02\xca\xa1\x26\xe0\xc7\xa3\x34\xd8\x48\x6d\xe0\xeb\xb7\x03\x03\x1f\xa5\xfe\xa2\x64\xec\x83\x99\x5b\xdc\x14\xed\x43\x83\xfe\xa2\xc2\xd6\x2c\x6d\x67\x30\x6d\x64\xd9\xeb\xf2\xa3\xa5\x00\xf7\xbb\x5a\x4e\xe4\x9c\x92\x89\xfd\x33\x04\x2f\x28\x4e\x89\xc2\xcf\x61\x15\x1a\x4e\x29\x59\xdb\x1a\xfe\x3e\xc6\xdd\xa1\xb9\xb1\x75\x8d\xca\xe3\x94\x54\x58\xa3\x3a\x2a\xde\xdb\xb1\xb8\xb6\xb5\x83\x97\x5d\x63\x37\xad\x76\x14\x2c\x08\x6f\xaf\xf3\x28\x83\xff\xae\xa3\x3c\x4c\x19\x25\xb2\x86\x06\x5b\x6f\x52\x09\x67\x33\xf8\xcb\xd9\xf5\x82\x9b\x41\xbd\x31\x7e\xba\x55\xb2\x35\xb5\xc7\xbc\x73\xcd\x07\x3c\xb8\xff\x4c\x50\x42\xc8\xc1\x66\xed\xff\xdb\xc9\x23\x36\x01\x4c\x00\xe3\x63\xc7\xa8\xb0\x29\x4a\x7c\xec\x9a\x0a\x95\xee\x67\xce\x35\x2e\xda\x0a\x7f\x1e\x17\xc4\x1b\x5d\x02\xae\x04\x5c\x71\x4e\xc9\x9e\x52\xe2\x14\xdd\x0e\x8a\x28\x71\x0e\xb9\x3d\xd8\x22\x4e\xc3\x55\x06\x8b\x38\x4b\xe0\x5c\xbb\x6f\x12\xc3\x3c\x89\x6f\xa3\xc5\x3c\x83\x5e\xe9\x4b\xc6\xc4\x34\xa2\xa0\xc4\x19\x25\x6b\x38\x3b\x09\xdc\xf3\x73\x2f\xe4\xb0\xce\x61\x36\xba\xb3\xb6\xb5\xff\xbf\x92\x06\xd3\x7e\x72\x8f\x05\x09\xc4\x49\xf6\xcf\x22\xbe\x63\x4e\x24\x60\xa3\xf1\x75\xe7\xcd\x93\x41\xef\xc2\xbb\xe0\xef\xc0\x5f\xf9\x37\x25\xba\xb7\xef\xbd\x7e\xc6\x21\x48\x20\xbf\x0f\xae\xb3\x10\xd2\x30\x03\xc6\x29\x0c\x1f\x4a\x48\xdd\x29\x90\x02\x76\xee\xd0\x55\xd1\x3e\xe0\x70\x5b\x7a\x41\x6e\x50\x39\x9d\xf3\x89\x42\xd1\x2b\x24\x7b\xf7\xf8\xee\xd2\x59\xbd\x8e\xdf\x14\xdb\x93\xc4\xee\x7a\xe4\x5b\xb1\x07\x92\x77\x4b\x0c\x66\x10\x7e\x99\x47\x79\x10\x06\x3e\xfb\x00\xbd\x3f\x1c\xfe\x90\x59\x77\x3b\xa6\x29\x4e\x89\x57\x61\x96\xaf\xe2\x45\x7c\x07\xec\x43\xc7\xfb\x17\xca\x68\xb6\xdb\x43\xa1\xb1\xaa\x05\x07\x1a\xfa\x39\xdd\xff\x0e\x00\x00\xff\xff\x83\x8f\x5a\x52\x28\x05\x00\x00")

func templatesSingletonSqlite_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonSqlite_upsertGoTpl,
		"templates/singleton/sqlite_upsert.go.tpl",
	)
}

func templatesSingletonSqlite_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonSqlite_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/sqlite_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonSqlite3_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5b\x4f\xdb\x3e\x14\x7f\x8e\x3f\xc5\xf9\x47\xe2\x2f\x1b\x82\x99\xc4\x1b\x53\x54\x8d\x56\x9b\x76\x81\xb1\x95\x89\x17\xa4\x11\x92\x93\x72\x44\x62\x1b\xdb\x25\x54\xa8\xdf\x7d\x72\xd2\x96\x04\x15\xb6\x87\xad\x2f\x95\x4e\x8e\x7f\x97\x73\xbb\xcf\x2c\xd8\xd9\xc3\xf4\xdb\x17\xf2\x78\x8b\x0b\x48\xc1\xe2\x0c\x1f\x8c\x3c\x99\x3b\x3f\xd6\xb5\xa1\x0a\xf9\x15\x1f\xd5\x24\x38\x4f\x2e\x95\x18\x5d\xba\xbd\x52\x5b\xa4\x99\x82\x5b\x5c\xc8\xdd\xd1\xa5\x12\x7b\x57\x82\x31\xbf\x30\x08\xee\xae\x22\x8f\xe7\xe8\x3c\x5a\x70\xde\xce\x73\x0f\x8f\x2c\x2a\xae\xc7\x5a\x29\xd8\x75\x77\x95\x9c\x1c\xb3\x10\x38\xcd\x6a\x8c\x9c\xb7\xa4\x66\x2c\xf2\xe8\xfc\xe4\x38\x84\x60\x15\x5a\x32\x56\xce\x55\x0e\xa4\xc8\x73\xd1\x61\x9c\x64\xa4\x20\x85\xff\xfb\x24\x8f\xcb\x4d\x2a\x77\x2d\xc1\xe6\x93\x00\x87\x7e\x6e\xb8\x00\xb4\x56\xdb\x80\x11\xfc\xa2\xb5\x5d\x80\x31\x00\x00\x27\x3b\x2d\x90\xc2\x3d\x19\xb4\xf2\x03\xfa\x69\xab\x81\xc7\x1d\xda\xa1\x2c\xae\x55\x56\x63\x2c\xda\x07\x54\x42\x85\x8a\xaf\xdf\x09\x48\x53\x78\x03\x8f\xed\xb7\xf0\xb3\xe8\xe7\x56\x75\x14\x4e\x9e\x62\xc3\x63\xa5\xa1\x83\x00\x67\x30\xa7\x92\xb0\x58\x81\x2d\x19\x8b\x9c\xec\xd9\x4f\xa1\xa4\x0a\x4d\xe6\x6f\xe4\x27\x4d\x8a\x6b\x27\xcf\xb1\x36\x13\xb2\x5c\x24\x50\xd6\x5e\x4e\x8d\x25\xe5\x4b\x1e\x5f\x6b\xaa\xf6\x57\x12\xf7\x77\x0a\xe9\xee\xaa\x38\x01\x9b\xa9\x42\x7e\x54\x9e\x0b\x21\x42\xa1\xe7\xb5\x19\xd7\x05\x1c\xa5\x80\x0f\x98\xcb\xb1\xae\xeb\x4c\x15\x1b\x6f\x71\x02\xf1\x7e\x5e\x17\xe1\x5f\x86\xe4\x38\xd9\x94\x44\xb0\x28\xb7\x98\x79\xfc\x0d\x40\xdf\x40\xe0\xb4\x09\x34\x21\x9f\xb4\x3c\x23\x83\x5c\x6c\x64\xc8\xa9\x2f\xf4\xdc\x43\x0a\x4d\x0f\x3b\x44\xdb\xce\x2a\x6c\xde\x7f\xc6\xc5\x04\x9d\xb7\x7a\x81\x96\xf7\x67\x33\x01\x1b\xc0\xa9\x6c\x3b\x98\xc2\x13\x64\x66\x3d\x17\x6f\xdb\xf0\x7f\x29\x28\xaa\x42\xab\xa3\x61\x1f\x2e\x6c\x66\x38\x5a\x9b\x40\x5c\x66\x54\x61\x01\x5e\x83\x0b\x4f\x57\x33\x7b\xd8\x02\x42\xde\xd9\x8b\x05\x8b\x96\x3d\xb2\xbe\xd6\xbf\x44\xd7\x41\x0e\x09\xb7\xd8\xbb\xc8\x68\x1b\x5d\x98\x84\xb3\x30\x08\x95\x0a\x3c\xe2\xcf\x14\x34\x19\x79\x28\xb5\x7d\xc5\x33\x8b\x1a\x39\xae\xb4\x43\x2e\xe0\xe0\x00\xde\x95\x61\x93\xd7\x53\x44\x0e\x0a\xad\x30\x81\x3c\x64\x80\xbf\x41\x68\x2c\x79\x04\x54\x05\xe8\xb2\x0d\x18\x32\xc8\xb6\x96\xee\xdf\x5a\xd9\x5e\xcf\x15\x92\xa2\xea\x95\x3b\xe1\x31\xb3\x85\x6e\x54\xff\x54\x50\xd9\xee\x41\x7b\xb7\x7a\x62\xd7\xb1\x75\x8d\x06\x2c\xda\xc9\xef\x58\xeb\x7b\xe4\xc3\x95\x78\x99\x39\xd7\x2a\xb0\xf2\xd5\x65\x4c\x3a\x7e\xf1\xa2\x80\x67\x47\x66\x9d\x90\xb4\x06\x5b\x29\xc3\x13\x17\x3d\x65\x74\xdd\x08\x3c\x5f\x0d\xaa\xfe\xfe\x0e\xae\x4a\x38\x3f\x47\x3b\x6e\xf4\xb3\xd2\x79\xfa\xe3\x7c\xfc\x7c\xbf\xc5\x46\xc3\xaa\xc3\x2f\x69\x53\x54\xb5\xa4\x83\x0a\x0d\x05\x2f\xd9\xaf\x00\x00\x00\xff\xff\x89\xba\x4f\x58\x81\x06\x00\x00")

func templates_testSingletonSqlite3_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonSqlite3_main_testGoTpl,
		"templates_test/singleton/sqlite3_main_test.go.tpl",
	)
}

func templates_testSingletonSqlite3_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonSqlite3_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/sqlite3_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonSqlite3_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonSqlite3_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonSqlite3_suites_testGoTpl,
		"templates_test/singleton/sqlite3_suites_test.go.tpl",
	)
}

func templates_testSingletonSqlite3_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonSqlite3_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/sqlite3_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\xf1\xb5\xa0\x0a\x85\x41\xaf\x29\x7c\x70\x7e\x0e\x41\x51\xc3\x88\xe5\x73\xc1\x48\x2b\x87\x30\x4d\x0a\xe4\xaa\xb6\x2b\xf0\xdd\x0b\x52\x4e\xe2\xfc\x15\x46\xd1\xa2\xe8\xc1\x96\x48\xcc\xee\xec\xce\xce\xaa\xef\x4f\xe0\x7f\xa9\x95\xf4\x70\x36\x06\x31\x89\x6f\xe8\x45\x29\x6f\x35\xc2\xf0\x10\x53\xb9\xc6\x10\x58\xd3\x99\x0a\x08\x3d\xf5\xfd\x10\x21\x16\xed\x4c\x77\x4e\xea\x10\x16\xad\x47\x47\x9c\xe0\x43\x04\x28\xb3\x14\x65\x0e\x3d\xcb\x48\xcc\xa4\x93\x5a\xa3\xe6\x39\xcb\x54\x03\x1a\x0d\x7f\x88\xbf\xb4\x1b\x33\x57\x66\xd9\x69\xe9\x42\x98\x68\x7d\x61\x75\xb7\x36\x3e\x87\xf1\xf8\x67\xc8\x99\x53\x6b\xe9\x76\x9f\x71\xf7\x10\xd0\xb3\x2c\x23\x31\x5f\xa9\x96\x8f\xe2\x7f\xab\xcc\x12\x28\x75\xb1\x51\x74\x07\xd6\xe8\x1d\xb4\x43\x1c\xac\x70\x07\xd5\x10\x39\xca\x59\x16\x18\xcb\x3c\x62\x1d\x15\x70\xd2\xd4\x76\xad\xbe\xa3\x98\xe2\x66\x8e\x58\xc7\xba\xbf\x49\x07\xe8\xd2\xcf\x3a\x96\x9d\x9e\xc2\x84\x08\xd7\x2d\x01\xdd\x21\x5c\x4f\xe7\x57\x37\x25\x78\x55\x23\xd8\x06\xa4\x81\xc5\x2c\xde\xb0\xcc\xc6\x8c\x07\x6a\x3d\x76\xd0\x87\xa4\x46\x4c\x7a\xc8\x39\x27\xd7\x55\xc4\x63\x31\x05\xbc\xb7\x05\xbc\x21\xc0\xe5\x79\xb9\x6b\xd1\x17\x40\xae\xc3\xfc\x53\xca\xf3\xdf\x18\x8c\xd2\x7b\x21\xae\x62\xa5\x0d\x1f\x2d\x4c\x92\x80\xec\x23\xc9\xeb\x05\x81\x4f\xd4\x67\xf0\xce\x8f\x8a\x98\x6f\xaf\x4b\xdf\xab\x06\x8c\x25\x10\x53\x7b\x61\x0d\xe1\x96\x42\xa8\x68\x1b\x3b\xab\x86\xb3\x38\x97\xd5\x6a\xe9\x6c\x67\x6a\x9e\xf7\x3d\x9a\x3a\x04\x96\x0d\x90\x2f\x9d\xa7\x72\xcb\x53\x96\xc3\x0c\x2f\x2e\x6e\xad\xd2\xe2\x1c\x97\xca\xa4\x1c\xda\xe3\xe1\x5d\xb9\xe5\x15\x6d\x8b\xd8\xe0\x3d\xc3\x51\xa0\x9c\x65\x35\x36\xe8\x20\x7a\x97\xe7\xd0\xc3\x57\x18\x03\x6d\xc5\x8d\xd5\xfa\x56\x56\x2b\x9e\x43\xd8\x3b\x73\x98\x85\x15\x7b\x2b\xbf\xd5\x78\x9c\x09\x9a\x1a\x4e\x42\x80\x78\x6a\xa4\xf6\x98\x48\x0b\x48\xb5\x5c\x9b\x06\x1d\xcf\x9f\x9e\x8e\x9b\x51\x97\xa8\x5f\x1f\xd0\x8b\xc9\x54\xb6\x33\x94\x2e\x9e\xb9\xec\x7e\x27\x79\x2e\x2e\x22\xe6\xc8\x56\x1e\x55\x78\x59\x25\xbf\xa7\x8d\x90\x44\x1c\x41\x1f\x9f\x40\x46\x1b\x69\x08\xac\x41\x70\x58\x59\x57\x17\xb0\xb4\x74\x36\x2a\x06\xfc\xbe\xe8\x67\xab\xb3\x98\x5d\x4e\xca\xab\xd7\x56\xe7\x77\x2c\xc7\x7e\x34\xc7\x7e\x44\x84\x10\x7f\x74\x95\x7e\xdd\x63\x71\xcb\xff\xb2\xc5\xfe\x11\x87\x05\xc6\x7e\x04\x00\x00\xff\xff\xcb\x64\xf6\xf1\xd2\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                          templates17_upsertGoTpl,
	"templates/singleton/sqlite_upsert.go.tpl":            templatesSingletonSqlite_upsertGoTpl,
	"templates_test/singleton/sqlite3_main_test.go.tpl":   templates_testSingletonSqlite3_main_testGoTpl,
	"templates_test/singleton/sqlite3_suites_test.go.tpl": templates_testSingletonSqlite3_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                        templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"sqlite_upsert.go.tpl": &bintree{templatesSingletonSqlite_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"sqlite3_main_test.go.tpl":   &bintree{templates_testSingletonSqlite3_main_testGoTpl, map[string]*bintree{}},
			"sqlite3_suites_test.go.tpl": &bintree{templates_testSingletonSqlite3_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
